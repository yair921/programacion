type AddResponse {
    status: Boolean
    message: String
    _id: ID
}

type UpdateDeleteResponse {
    status: Boolean
    message: String
}

type Distributor {
    _id: ID!
    id_fiscal: String!
    nombre: String!
    active: Boolean!
}

type DistributorResGetAll {
    status: Boolean
    message: String
    data: [Distributor]
}

input DistributorInput {
    nombre: String!
    id_fiscal: String!
}

input DistributorInputUpdate {
    nombre: String
    id_fiscal: String
    active: Boolean
}

type RoomType {
    _id: ID!
    nombre: String!
    active: Boolean!
}

type RoomTypeResGetAll {
    status: Boolean
    message: String
    data: [RoomType]
}

input RoomTypeInput {
    nombre: String!
}

input RoomTypeInputUpdate {
    nombre: String
    active: Boolean
}

type Theater {
    _id: ID!
    nombre: String!
    active: Boolean!
}

type TheaterResGetAll {
    status: Boolean
    message: String
    data: [Theater]
}

input TheaterInput {
    nombre: String!
}

input TheaterInputUpdate {
    nombre: String
    active: Boolean
}

type MovieFormat {
    _id: ID!
    nombre: String!
    active: Boolean!
}

type MovieFormatResGetAll {
    status: Boolean
    message: String
    data: [MovieFormat]
}

input MovieFormatInput {
    nombre: String!
}

input MovieFormatInputUpdate {
    nombre: String
    active: Boolean
}

type Room {
    _id: ID!
    idTheater: ID!
    nombre: String!
    numberChairs: Int!
    cleaningTime: Int!
    active: Boolean!
}

type RoomResGetAll {
    status: Boolean
    message: String
    data: [Room]
}

input RoomInput {
    idTheater: ID!
    nombre: String!
    numberChairs: Int!
    cleaningTime: Int!
}

input RoomInputUpdate {
    idTheater: ID
    nombre: String
    numberChairs: Int
    cleaningTime: Int
    active: Boolean
}

type Movie {
    _id: ID!
    idDistributor: ID!
    idsMovieFormat: [ID!]!
    nombre: String!
    duration: Int!
    active: Boolean!
}

type MovieResGetAll {
    status: Boolean
    message: String
    data: [Movie]
}

input MovieInput {
    idDistributor: ID!
    idsMovieFormat: [ID!]!
    nombre: String!
    duration: Int!
}

input MovieInputUpdate {
    idDistributor: ID
    idsMovieFormat: [ID!]
    nombre: String
    duration: Int
    active: Boolean
}

type UserOption {
    _id: ID!
    nombre: String!
    actions: [String!]!
    active: Boolean!
}

type UserOptionResGetAll {
    status: Boolean
    message: String
    data: [UserOption]
}

input UserOptionInput {
    nombre: String!
    actions: [String!]!
}

input UserOptionInputUpdate {
    nombre: String
    actions: [String!]
    active: Boolean
}

type UserRol {
    _id: ID!
    nombre: String!
    permissions: [UserRolPermission!]!
    active: Boolean!
}

type UserRolPermission {
    idUserOption: ID!
    nameUserOption: String!
    actions: [String!]!
}

input UserRolPermissionInput {
    idUserOption: ID!
    nameUserOption: String!
    actions: [String!]!
}

type UserRolResGetAll {
    status: Boolean
    message: String
    data: [UserRol]
}

input UserRolInput {
    nombre: String!
    permissions: [UserRolPermissionInput!]!
}

input UserRolInputUpdate {
    nombre: String
    permissions: [UserRolPermissionInput!]
    active: Boolean
}



type User {
    _id: ID!
    idTheater: ID!
    idUserRol: ID!
    fullName: String!
    email: String!
    userName: String!
    active: Boolean!
}

type UserResGetAll {
    status: Boolean
    message: String
    data: [User]
}

input UserInput {
    idUserRol: ID!
    idTheater: ID!
    fullName: String!
    email: String!
    userName: String!
    password: String!
}

input UserInputUpdate {
    idUserRol: ID
    idTheater: ID
    fullName: String
    email: String
    userName: String
    password: String
    active: Boolean
}


type Query {
    "Get all distributors"
    getAllDistributor: DistributorResGetAll
    "Get all room types"
    getAllRoomType: RoomTypeResGetAll 
    "Get all theaters"
    getAllTheater: TheaterResGetAll
    "Get all movie formats"
    getAllMovieFormat: MovieFormatResGetAll
    "Get all rooms"
    getAllRoom: RoomResGetAll
    "Get al movies"
    getAllMovie: MovieResGetAll
    "Get all user options"
    getAllUserOption: UserOptionResGetAll
    "Get all user roles"
    getAllUserRol: UserRolResGetAll
    "Get all user"
    getAllUser: UserResGetAll
}

type Mutation {
    "Add new distributor"
    addDistributor(input: DistributorInput!): AddResponse
    "Update distributor"
    updateDistributor(_id: ID!, input: DistributorInputUpdate!): UpdateDeleteResponse
    "Delete distributor"
    deleteDistributor(_id: ID!): UpdateDeleteResponse

    "Add a new room type"
    addRoomType(input: RoomTypeInput!): AddResponse
    "Update a room type"
    updateRoomType(_id: ID!, input: RoomTypeInputUpdate!): UpdateDeleteResponse
    "Delete a room type"
    deleteRoomType(_id: ID!): UpdateDeleteResponse

    "Add a new theater"
    addTheater(input: TheaterInput!): AddResponse
    "Update a theater"
    updateTheater(_id: ID!, input: TheaterInputUpdate!): UpdateDeleteResponse
    "Delete a theater"
    deleteTheater(_id: ID!): UpdateDeleteResponse

    "Add a new movie format"
    addMovieFormat(input: MovieFormatInput!): AddResponse
    "Update a movie format"
    updateMovieFormat(_id: ID!, input: MovieFormatInputUpdate!): UpdateDeleteResponse
    "Delete a movie format"
    deleteMovieFormat(_id: ID!): UpdateDeleteResponse

    "Add a room"
    addRoom(input: RoomInput!): AddResponse
    "Update a room"
    updateRoom(_id: ID!, input: RoomInputUpdate!): UpdateDeleteResponse
    "Delete a room"
    deleteRoom(_id: ID!): UpdateDeleteResponse

    "Add a movie"
    addMovie(input: MovieInput!): AddResponse
    "Update a movie"
    updateMovie(_id: ID!, input: MovieInputUpdate!): UpdateDeleteResponse
    "Delete a movie"
    deleteMovie(_id: ID!): UpdateDeleteResponse

    "Add a user option"
    addUserOption(input: UserOptionInput!): AddResponse
    "Update a user option"
    updateUserOption(_id: ID!, input: UserOptionInputUpdate!): UpdateDeleteResponse
    "Delete a user option"
    deleteUserOption(_id: ID!): UpdateDeleteResponse

    "Add a user rol"
    addUserRol(input: UserRolInput!): AddResponse
    "Update a user rol"
    updateUserRol(_id: ID!, input: UserRolInputUpdate!): UpdateDeleteResponse
    "Delete a user Rol"
    deleteUserRol(_id: ID!): UpdateDeleteResponse

    "Add a user"
    addUser(input: UserInput!): AddResponse
    "Update a user"
    updateUser(_id: ID!, input: UserInputUpdate!): UpdateDeleteResponse
    "Delete a user"
    deleteUser(_id: ID!): UpdateDeleteResponse
}